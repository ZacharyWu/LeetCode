class Solution {
public:
    vector<vector<int>> kClosest(vector<vector<int>>& points, int K) {

        vector<int> distance(points.size());
        vector<vector<int>> results(K, vector<int>(2, 0));
        
        for(int i = 0; i < points.size(); ++i){
            distance[i] = points[i][0] * points[i][0] + points[i][1] * points[i][1];
            // cout << distance[i] << endl;
        }
        for (int i = 0; i < K ; ++i) {
            int minIndex = i;
            for (int j = i + 1; j < points.size(); j++) {
                if (distance[j] < distance[minIndex]) {     // 
                    minIndex = j;                 // 
                }
            }
            
            int temp = distance[i];
            distance[i] = distance[minIndex];
            distance[minIndex] = temp;

            results [i][0] = points[minIndex][0];
            results [i][1] = points[minIndex][1];

            int tempX  = points[i][0];
            int tempY  = points[i][1];
            points [i][0] = points[minIndex][0];
            points [i][1] = points[minIndex][1];
            points[minIndex][0]  = tempX;
            points[minIndex][1]  = tempY;
        }
        
        return results;
    }
};
