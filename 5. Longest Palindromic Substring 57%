class Solution {
public:
    string longestPalindrome(string s) {
        string result = "";
        int start = 0, end = 0;
        for (int i = 0; i < s.size(); ++i) {
            // int len1 = expandAroundCenter(s, i, i);
            // int len2 = expandAroundCenter(s, i, i + 1);
            int len = std::max(exp(s, i, i), exp(s, i, i + 1));
            if (len > end - start) {
                start = i - (len - 1) / 2;
                end = i + len / 2;
            }
        }
        result = s.substr(start, end + 1 - start);
        return result;
    }
    int exp(string s, int L, int R) {
    while (L >= 0 && R < s.size() && s.at(L) == s.at(R)) {
        L--;
        R++;
    }
    return R - L - 1;
    }
            //My Code:
        // string subs;
        // for (int n = 0; n < s.size(); ++n){ 
        //     for (int m = 0; m <= n ; ++m){
        //         subs = s.substr(m,s.size() - n);
        //         for (int i = 0; i <= (s.size() - n)/2 ; ++i){
        //             if (subs.at(i) != subs.at(subs.size()-1-i))
        //                 break;
        //             else{
        //                 if (i == (s.size() - n)/2)
        //                     return subs;
        //             }  
        //         }
        //     }
        // }
        // return "";
};
