class Solution {
public:
    double findMedianSortedArrays(vector<int>& A, vector<int>& B) {
        int m = A.size();
        int n = B.size();
        double med;
        if (m > n) {
            std::vector<int> temp = A; A = B; B =temp;
            int tmp = m; m = n; n= tmp;
        }
        int iMin = 0, iMax = m, halfLen = (m + n + 1) / 2;
        while (iMin <= iMax) {
            int i = (iMin + iMax) / 2;
            int j = halfLen - i;
            if (i < iMax && B[j-1] > A[i]){
                iMin = i + 1;
            }
            else if (i > iMin && A[i-1] > B[j]){
                iMax = i - 1;
            }
            else {
                int maxLeft = 0;
                if (i == 0) { maxLeft = B[j-1];}
                else if (j == 0) { maxLeft = A[i-1];}
                else { maxLeft = std::max(B[j-1], A[i-1]); }
                
                if ( (m + n) % 2 == 1 ) { med = maxLeft; }
                else {
                    int minRight = 0;
                    if (i == m) { minRight = B[j]; }
                    else if (j == n) { minRight = A[i]; }
                    else { minRight = std::min(B[j], A[i]); }
                    med = (maxLeft + minRight) / 2.0;
                }
                break;
            } 
        }
        return med;
    }
};
